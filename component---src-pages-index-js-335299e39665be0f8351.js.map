{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Layout.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","keywords","className","map","_ref","node","frontmatter","fields","slug","gatsby__WEBPACK_IMPORTED_MODULE_2__","style","boxShadow","to","key","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery","SEO","description","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired","bioQuery","Bio","react_default","gatsby_browser_entry","_4027657132","Layout","header","_this$props","children","pathname","Fragment","components_Bio","Date","getFullYear"],"mappings":"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","file":"component---src-pages-index-js-335299e39665be0f8351.js","sourcesContent":["import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/Layout'\r\nimport SEO from '../components/seo'\r\n\r\nclass BlogIndex extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n\r\n    return (\r\n      <Layout location={this.props.location} title={siteTitle}>\r\n        <SEO\r\n          title=\"All posts\"\r\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n        />\r\n        {posts &&\r\n          <nav className=\"list\">\r\n            {posts.map(({ node }) => {\r\n              const title = node.frontmatter.title || node.fields.slug\r\n              return (\r\n                <Link className=\"no-underline inline-block\" style={{ boxShadow: `none` }} to={node.fields.slug} key={node.fields.slug}>\r\n                  <h3 className=\"list__title\">\r\n                    {title}\r\n                  </h3>\r\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\r\n                </Link>\r\n              )\r\n            })}\r\n          </nav>\r\n        }\r\n\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.description}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Image from 'gatsby-image'\r\n\r\nfunction Bio() {\r\n  return (\r\n    <StaticQuery\r\n      query={bioQuery}\r\n      render={data => {\r\n        const { author } = data.site.siteMetadata\r\n        return (\r\n          <small className=\"inline-block\">\r\n            Written by <strong>{author}</strong> who lives and works in London building digital stuff.\r\n          </small>\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst bioQuery = graphql`\r\n  query BioQuery {\r\n    site {\r\n      siteMetadata {\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Bio\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport Bio from '../components/Bio'\r\n\r\nclass Layout extends React.Component {\r\n  render() {\r\n    const { location, title, children } = this.props\r\n    const rootPath = `${__PATH_PREFIX__}/`\r\n    let header\r\n\r\n    if (location.pathname === rootPath) {\r\n      header = (\r\n        <h1 className=\"logo\">\r\n          <Link\r\n            className=\"no-underline\"\r\n            to={`/`}\r\n          >\r\n            {title}\r\n          </Link>\r\n        </h1>\r\n      )\r\n    } else {\r\n      header = (\r\n        <h3 className=\"logo\">\r\n          <Link\r\n            className=\"no-underline\"\r\n            to={`/`}\r\n          >\r\n            {title}\r\n          </Link>\r\n        </h3>\r\n      )\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <header className=\"header\">\r\n          {header}\r\n          <Link className=\"no-underline sans-serif\" to={`/`}>All posts</Link>\r\n        </header>\r\n        {children}\r\n        <Bio />\r\n        <footer>\r\n          <small>© {new Date().getFullYear()} - Built with ❤</small>\r\n        </footer>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout\r\n"],"sourceRoot":""}